# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EestiMetsaMask
                           A QGIS plugin
 Eesti Metsamaski töötlus
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                           -------------------
     begin                 : 2025-07-06
     git sha               : $Format:%H$
     copyright             : (C) 2025 by Allan Sims
     email                 : allan.sims@emu.ee
 ***************************************************************************/

/***************************************************************************
 * *
 * This program is free software; you can redistribute it and/or modify  *
 * it under the terms of the GNU General Public License as published by  *
 * the Free Software Foundation; either version 2 of the License, or     *
 * (at your option) any later version.                                   *
 * *
 ***************************************************************************/
"""
# --- LISATUD IMPORT-LAUSED ---
import os
import sqlite3
import urllib.request

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QThread, pyqtSignal
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .metsa_mask_dialog import EestiMetsaMaskDialog
import os.path


# --- LISATUD ALLALAADIMISE LÕIME KLASS ---
# See klass tegeleb failide allalaadimisega taustal, et QGIS-i kasutajaliides ei hanguks.
class DownloadThread(QThread):
    # Signaalid edenemise, lõpetamise ja vigade edastamiseks
    progress = pyqtSignal(int)
    finished = pyqtSignal()
    error = pyqtSignal(str)

    def __init__(self, db_path, table_name, url_column, download_dir):
        super().__init__()
        self.db_path = db_path
        self.table_name = table_name
        self.url_column = url_column
        self.download_dir = download_dir
        self.is_running = True

    def run(self):
        """ Laeb failid alla andmebaasis olevatelt URL-idelt """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute(f"SELECT {self.url_column} FROM {self.table_name}")
            urls = [row[0] for row in cursor.fetchall()]
            conn.close()

            if not urls:
                self.error.emit("Andmebaasist ei leitud ühtegi URL-i.")
                return

            total_files = len(urls)
            for i, url in enumerate(urls):
                if not self.is_running:
                    break # Peata, kui kasutaja on dialoogi sulgenud
                try:
                    file_name = os.path.basename(url)
                    save_path = os.path.join(self.download_dir, file_name)
                    urllib.request.urlretrieve(url, save_path)
                    progress_percentage = int(((i + 1) / total_files) * 100)
                    self.progress.emit(progress_percentage)
                except Exception as e:
                    print(f"Viga faili {url} allalaadimisel: {e}")

            if self.is_running:
                self.finished.emit()

        except Exception as e:
            self.error.emit(f"Andmebaasiga ühendumisel tekkis viga: {e}")

    def stop(self):
        self.is_running = False


class EestiMetsaMask:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
                      which provides the hook by which you can manipulate the QGIS
                      application at run time.
        :type iface: QgsInterface
        """
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'EestiMetsaMask_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&EestiMetsamask')
        self.first_start = None
        
        # --- LISATUD ---
        # Hoiame viidet dialoogile ja lõimele
        self.dlg = None
        self.download_thread = None

    def tr(self, message):
        """Get the translation for a string using Qt translation API."""
        return QCoreApplication.translate('EestiMetsaMask', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar."""
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)
        if whats_this is not None:
            action.setWhatsThis(whats_this)
        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)
        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/metsa_mask/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Metsamask'),
            callback=self.run,
            parent=self.iface.mainWindow())
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&EestiMetsamask'),
                action)
            self.iface.removeToolBarIcon(action)
        # --- LISATUD ---
        # Peata allalaadimine, kui pistikprogramm maha laetakse
        if self.download_thread and self.download_thread.isRunning():
            self.download_thread.stop()
            self.download_thread.wait() # Oota lõime korrektset sulgumist


    def run(self):
        """Run method that performs all the real work"""
        if self.first_start:
            self.first_start = False
            self.dlg = EestiMetsaMaskDialog()

            # --- TÄIENDATUD SEADISTUS ---
            # Ühenda dialoogi nupud (mis on .ui failis defineeritud) funktsioonidega
            # Eeldan, et nimepanek on sarnane: btn_select_sqlite, btn_download
            self.dlg.btn_select_sqlite.clicked.connect(self.select_sqlite_file)
            self.dlg.btn_download.clicked.connect(self.start_download)
            
            # Lähtesta nupud ja progressbar algseisundisse
            self.dlg.progress_bar.setValue(0)
            self.enable_buttons()


        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            # Siia saad lisada koodi, mis käivitub kui vajutatakse "OK"
            pass

    # --- KÕIK JÄRGNEVAD FUNKTSIOONID ON LISATUD ---

    def select_sqlite_file(self):
        """ Avab failidialoogi SQLite-faili valimiseks """
        # Eeldan, et dialoogis on QLineEdit nimega 'le_sqlite_path'
        file_path, _ = QFileDialog.getOpenFileName(self.dlg, "Vali SQLite fail", "", "SQLite failid (*.sqlite *.db)")
        if file_path:
            self.dlg.le_sqlite_path.setText(file_path)

    def start_download(self):
        """ Alustab failide allalaadimise protsessi """
        db_path = self.dlg.le_sqlite_path.text()
        if not db_path:
            QMessageBox.warning(self.dlg, "Viga", "Palun vali esmalt SQLite-fail.")
            return

        download_dir = QFileDialog.getExistingDirectory(self.dlg, "Vali allalaadimise kaust")
        if not download_dir:
            return

        # **TÄHELEPANU**: Asenda need oma andmebaasi tegelike nimedega
        table_name = "failid"
        url_column = "url"

        self.dlg.progress_bar.setValue(0)
        self.disable_buttons() # Keela nupud allalaadimise ajaks

        self.download_thread = DownloadThread(db_path, table_name, url_column, download_dir)
        self.download_thread.progress.connect(self.update_progress)
        self.download_thread.finished.connect(self.download_finished)
        self.download_thread.error.connect(self.download_error)
        self.download_thread.start()

    def update_progress(self, value):
        """ Uuendab edenemisriba väärtust """
        self.dlg.progress_bar.setValue(value)

    def download_finished(self):
        """ Käivitatakse, kui allalaadimine on edukalt lõppenud """
        QMessageBox.information(self.dlg, "Valmis", "Kõik failid on alla laetud.")
        self.enable_buttons()
        self.dlg.progress_bar.setValue(100) # Veendu, et riba on 100%

    def download_error(self, error_message):
        """ Kuvab veateate, kui allalaadimisel tekib viga """
        QMessageBox.critical(self.dlg, "Viga", f"Allalaadimisel tekkis viga:\n{error_message}")
        self.enable_buttons()

    def disable_buttons(self):
        """ Keelab nupud tegevuse ajaks """
        self.dlg.btn_download.setEnabled(False)
        self.dlg.btn_select_sqlite.setEnabled(False)
        
    def enable_buttons(self):
        """ Lubab nupud uuesti """
        self.dlg.btn_download.setEnabled(True)
        self.dlg.btn_select_sqlite.setEnabled(True)